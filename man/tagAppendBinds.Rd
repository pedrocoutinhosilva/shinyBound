% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-html.R
\name{tagAppendBinds}
\alias{tagAppendBinds}
\title{Links diferent bindings to the given tag. For all list arguments, instead of
  a name = value pair, a simple string can be used instead if name and value
  are the same. Both long and short versions of the attributes can be used.}
\usage{
tagAppendBinds(
  tag,
  fromShinyProperty = NULL,
  fsProperty = NULL,
  fromShinyStyle = NULL,
  fsStyle = NULL,
  fromShinyAttribute = NULL,
  fsAttribute = NULL,
  fromShinyClass = NULL,
  fsClass = NULL,
  toShinyProperty = NULL,
  tsProperty = NULL,
  toShinyStyle = NULL,
  tsStyle = NULL,
  toShinyAttribute = NULL,
  tsAttribute = NULL,
  toShinyClass = NULL,
  tsClass = NULL,
  toShinyEvent = NULL,
  tsEvent = NULL
)
}
\arguments{
\item{tag}{html fragment to add attributes to.}

\item{fromShinyProperty}{Named list where the name is the JS property to
update and the value the corresponding named argument used in the
updateWebComponent or as part of the initial component state.}

\item{fsProperty}{Short hand version of the previous argument.}

\item{fromShinyStyle}{Named list where the name is the css property to
update and the value the corresponding named argument used in the
updateWebComponent or as part of the initial component state.}

\item{fsStyle}{Short hand version of the previous argument.}

\item{fromShinyAttribute}{Named list where the name is the css property to
update and the value the corresponding named argument used in the
updateWebComponent or as part of the initial component state.}

\item{fsAttribute}{Short hand version of the previous argument.}

\item{fromShinyClass}{Named list where the name is the class to
update and the value the corresponding named argument used in the
updateWebComponent or as part of the initial component state.}

\item{fsClass}{Short hand version of the previous argument.}

\item{toShinyProperty}{Named list where the name is the JS property to
get and the value the corresponding named attribute that can be read
using input$inputId or directly via input$inputId_attribute.}

\item{tsProperty}{Short hand version of the previous argument.}

\item{toShinyStyle}{Named list where the name is the css property to
get and the value the corresponding attribute that can be read
using input$inputId or directly via input$inputId_attribute.}

\item{tsStyle}{Short hand version of the previous argument.}

\item{toShinyAttribute}{Named list where the name is the HTML attribute to
get and the value the corresponding attribute that can be read
using input$inputId or directly via input$inputId_attribute.}

\item{tsAttribute}{Short hand version of the previous argument.}

\item{toShinyClass}{Named list where the name is the class to
get and the value the corresponding named attribute that can be read
using input$inputId or directly via input$inputId_attribute.}

\item{tsClass}{Short hand version of the previous argument.}

\item{toShinyEvent}{Named list where the name is the HTML event to
trigger an update and the value the corresponding named attribute that can
be read using input$inputId or directly via input$inputId_attribute.}

\item{tsEvent}{Short hand version of the previous argument.}
}
\value{
a HTML tag that can be added to the page.
}
\description{
Links diferent bindings to the given tag. For all list arguments, instead of
  a name = value pair, a simple string can be used instead if name and value
  are the same. Both long and short versions of the attributes can be used.
}
